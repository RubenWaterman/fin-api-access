# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule FinAPIAccess.Api.Labels do
  @moduledoc """
  API calls for all endpoints tagged `Labels`.
  """

  alias FinAPIAccess.Connection
  import FinAPIAccess.RequestBuilder


  @doc """
  Create a new label
  Create a new label for a specific user. Must pass the new label's name and the user's access_token.<br/><br/>Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain 'type'. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like 'insurance', which is a more 'fact-based', or 'objective' way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - label_params (LabelParams): Label's name
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec create_label(Tesla.Env.client, FinAPIAccess.Model.LabelParams.t, keyword()) :: {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.Label.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def create_label(connection, label_params, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/api/v1/labels")
    |> add_param(:body, :body, label_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 201, %FinAPIAccess.Model.Label{}},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 422, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end

  @doc """
  Delete all labels
  Delete all labels of the user that is authorized by the access_token. Must pass the user's access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %FinAPIAccess.Model.IdentifierList{}} on success
  {:error, info} on failure
  """
  @spec delete_all_labels(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.IdentifierList.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def delete_all_labels(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/labels")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FinAPIAccess.Model.IdentifierList{}},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end

  @doc """
  Delete a label
  Delete a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of the label to delete
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_label(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def delete_label(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/labels/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 404, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end

  @doc """
  Edit a label
  Change the name of a label of the user that is authorized by the access_token. Must pass the label's identifier, the label's new name and the user's access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Label's identifier
  - label_params (LabelParams): Label's new name
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec edit_label(Tesla.Env.client, integer(), FinAPIAccess.Model.LabelParams.t, keyword()) :: {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.Label.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def edit_label(connection, id, label_params, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/api/v1/labels/#{id}")
    |> add_param(:body, :body, label_params)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FinAPIAccess.Model.Label{}},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 404, %FinAPIAccess.Model.ErrorMessage{}},
      { 422, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end

  @doc """
  Get and search all labels
  Get labels of the user that is authorized by the access_token. Must pass the user's access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :ids ([integer()]): A comma-separated list of label identifiers. If specified, then only labels whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    - :search (String.t): If specified, then only those labels will be contained in the result whose 'name' contains the given search string (the matching works case-insensitive). If no labels contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a label to get included into the result.
    - :page (integer()): Result page that you want to retrieve
    - :per_page (integer()): Maximum number of records per page. By default it's 20. Can be at most 500.
    - :order ([String.t]): Determines the order of the results. You can order the results by 'id' or 'name'. The default order for all services is 'id,asc'. Since both fields (id and name) are unique, ordering by multiple fields is pointless. The general format is: 'property[,asc|desc]', with 'asc' being the default value.
  ## Returns

  {:ok, %FinAPIAccess.Model.PageableLabelList{}} on success
  {:error, info} on failure
  """
  @spec get_and_search_all_labels(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.PageableLabelList.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def get_and_search_all_labels(connection, opts \\ []) do
    optional_params = %{
      :"ids" => :query,
      :"search" => :query,
      :"page" => :query,
      :"perPage" => :query,
      :"order" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/v1/labels")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FinAPIAccess.Model.PageableLabelList{}},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end

  @doc """
  Get a label
  Get a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of requested label
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec get_label(Tesla.Env.client, integer(), keyword()) :: {:ok, FinAPIAccess.Model.ErrorMessage.t} | {:ok, FinAPIAccess.Model.Label.t} | {:ok, FinAPIAccess.Model.BadCredentialsError.t} | {:error, Tesla.Env.t}
  def get_label(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/v1/labels/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %FinAPIAccess.Model.Label{}},
      { 400, %FinAPIAccess.Model.ErrorMessage{}},
      { 401, %FinAPIAccess.Model.BadCredentialsError{}},
      { 403, %FinAPIAccess.Model.ErrorMessage{}},
      { 404, %FinAPIAccess.Model.ErrorMessage{}},
      { 500, %FinAPIAccess.Model.ErrorMessage{}}
    ])
  end
end
