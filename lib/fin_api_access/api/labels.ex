# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule FinAPIAccess.Api.Labels do
  @moduledoc """
  API calls for all endpoints tagged `Labels`.
  """

  alias FinAPIAccess.Connection
  import FinAPIAccess.RequestBuilder


  @doc """
  Create a new label
  Create a new label for a specific user. Must pass the new label&#39;s name and the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain &#39;type&#39;. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like &#39;insurance&#39;, which is a more &#39;fact-based&#39;, or &#39;objective&#39; way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - body (LabelParams): Label&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec create_label(Tesla.Env.client, FinAPIAccess.Model.LabelParams.t, keyword()) :: {:ok, FinAPIAccess.Model.Label.t} | {:error, Tesla.Env.t}
  def create_label(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/api/v1/labels")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.Label{})
  end

  @doc """
  Delete all labels
  Delete all labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.IdentifierList{}} on success
  {:error, info} on failure
  """
  @spec delete_all_labels(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.IdentifierList.t} | {:error, Tesla.Env.t}
  def delete_all_labels(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/labels")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.IdentifierList{})
  end

  @doc """
  Delete a label
  Delete a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of the label to delete
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_label(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_label(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/labels/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Edit a label
  Change the name of a label of the user that is authorized by the access_token. Must pass the label&#39;s identifier, the label&#39;s new name and the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Label&#39;s identifier
  - body (LabelParams): Label&#39;s new name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec edit_label(Tesla.Env.client, integer(), FinAPIAccess.Model.LabelParams.t, keyword()) :: {:ok, FinAPIAccess.Model.Label.t} | {:error, Tesla.Env.t}
  def edit_label(connection, id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/api/v1/labels/#{id}")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.Label{})
  end

  @doc """
  Get and search all labels
  Get labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :ids ([integer()]): A comma-separated list of label identifiers. If specified, then only labels whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    - :search (String.t): If specified, then only those labels will be contained in the result whose &#39;name&#39; contains the given search string (the matching works case-insensitive). If no labels contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a label to get included into the result.
    - :page (integer()): Result page that you want to retrieve
    - :per_page (integer()): Maximum number of records per page. By default it&#39;s 20. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes.
    - :order ([String.t]): Determines the order of the results. You can order the results by &#39;id&#39; or &#39;name&#39;. The default order for all services is &#39;id,asc&#39;. Since both fields (id and name) are unique, ordering by multiple fields is pointless. The general format is: &#39;property[,asc|desc]&#39;, with &#39;asc&#39; being the default value. 

  ## Returns

  {:ok, %FinAPIAccess.Model.PageableLabelList{}} on success
  {:error, info} on failure
  """
  @spec get_and_search_all_labels(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.PageableLabelList.t} | {:error, Tesla.Env.t}
  def get_and_search_all_labels(connection, opts \\ []) do
    optional_params = %{
      :"ids" => :query,
      :"search" => :query,
      :"page" => :query,
      :"perPage" => :query,
      :"order" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/v1/labels")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.PageableLabelList{})
  end

  @doc """
  Get a label
  Get a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of requested label
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.Label{}} on success
  {:error, info} on failure
  """
  @spec get_label(Tesla.Env.client, integer(), keyword()) :: {:ok, FinAPIAccess.Model.Label.t} | {:error, Tesla.Env.t}
  def get_label(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/v1/labels/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.Label{})
  end
end
