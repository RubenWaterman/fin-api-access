# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule FinAPIAccess.Api.NotificationRules do
  @moduledoc """
  API calls for all endpoints tagged `NotificationRules`.
  """

  alias FinAPIAccess.Connection
  import FinAPIAccess.RequestBuilder


  @doc """
  Create a new notification rule
  Create a new notification rule for a specific user. Must pass the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Setting up notification rules for a user allows your client application to get notified about changes in the user&#39;s data, e.g. when new transactions were downloaded, an account&#39;s balance has changed, or the user&#39;s banking credentials are no longer correct. Note that currently, this feature is implemented only for finAPI&#39;s automatic batch update, i.e. notification rules are only relevant when the user has activated the automatic updates (and when the automatic batch update is activated in general for your client).&lt;br/&gt;&lt;br/&gt;There are different kinds of notification rules. The kind of a rule is depicted by the &#39;triggerEvent&#39;. The trigger event specifies what data you have to pass when creating a rule (specifically, the contents of the &#39;params&#39; field), on which events finAPI will send notifications to your client application, as well as what data is contained in those notifications. The specifics of the different trigger events are documented in the following article on our Dev Portal: &lt;a href&#x3D;&#39;https://finapi.zendesk.com/hc/en-us/articles/232324608-How-to-create-notification-rules-and-receive-notifications&#39; target&#x3D;&#39;_blank&#39;&gt;How to create notification rules and receive notifications&lt;/a&gt;

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - body (NotificationRuleParams): Notification rule parameters
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.NotificationRule{}} on success
  {:error, info} on failure
  """
  @spec create_notification_rule(Tesla.Env.client, FinAPIAccess.Model.NotificationRuleParams.t, keyword()) :: {:ok, FinAPIAccess.Model.NotificationRule.t} | {:error, Tesla.Env.t}
  def create_notification_rule(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/api/v1/notificationRules")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.NotificationRule{})
  end

  @doc """
  Delete all notification rules
  Delete all notification rules of the user that is authorized by the access_token. Must pass the user&#39;s access_token. 

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.IdentifierList{}} on success
  {:error, info} on failure
  """
  @spec delete_all_notification_rules(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.IdentifierList.t} | {:error, Tesla.Env.t}
  def delete_all_notification_rules(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/notificationRules")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.IdentifierList{})
  end

  @doc """
  Delete a notification rule
  Delete a single notification rule of the user that is authorized by the access_token. Must pass the notification rule&#39;s identifier and the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of the notification rule to delete
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_notification_rule(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_notification_rule(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/notificationRules/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get and search all notification rules
  Get notification rules of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those notification rules that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :ids ([integer()]): A comma-separated list of notification rule identifiers. If specified, then only notification rules whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    - :trigger_event (String.t): If specified, then only notification rules with given trigger event will be regarded.
    - :include_details (boolean()): If specified, then only notification rules that include or not include details will be regarded.

  ## Returns

  {:ok, %FinAPIAccess.Model.NotificationRuleList{}} on success
  {:error, info} on failure
  """
  @spec get_and_search_all_notification_rules(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.NotificationRuleList.t} | {:error, Tesla.Env.t}
  def get_and_search_all_notification_rules(connection, opts \\ []) do
    optional_params = %{
      :"ids" => :query,
      :"triggerEvent" => :query,
      :"includeDetails" => :query
    }
    %{}
    |> method(:get)
    |> url("/api/v1/notificationRules")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.NotificationRuleList{})
  end

  @doc """
  Get a notification rule
  Get a single notification rule of the user that is authorized by the access_token. Must pass the notification rule&#39;s identifier and the user&#39;s access_token.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - id (integer()): Identifier of requested notification rule
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.NotificationRule{}} on success
  {:error, info} on failure
  """
  @spec get_notification_rule(Tesla.Env.client, integer(), keyword()) :: {:ok, FinAPIAccess.Model.NotificationRule.t} | {:error, Tesla.Env.t}
  def get_notification_rule(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/v1/notificationRules/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.NotificationRule{})
  end
end
