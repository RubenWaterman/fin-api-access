# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule FinAPIAccess.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias FinAPIAccess.Connection
  import FinAPIAccess.RequestBuilder


  @doc """
  Create a new user
  &lt;p&gt;Create a new user. Must pass your global (i.e. client) access_token. &lt;/p&gt;&lt;p&gt;This service returns the user&#39;s password as plain text. &lt;/p&gt;&lt;p&gt;The automatic update of the user&#39;s bank connections is disabled by default for any new user. User identifiers are regarded case-insensitive by finAPI.&lt;/p&gt;&lt;p&gt;Please note that finAPI generally has a restricted set of allowed characters for input fields. You can find the allowed characters &lt;a href &#x3D; \&quot;https://finapi.zendesk.com/hc/en-us/articles/222013148-What-symbols-are-allowed-in-finAPI-\&quot;&gt;here&lt;/a&gt;. If a field does not explicitly specify a set of allowed characters, then these are the characters that are allowed for the field. Some fields may specify a different set of characters, in which case this will be documented for the field (like for the &#39;id&#39; field in this service).&lt;/p&gt;

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - body (UserCreateParams): User&#39;s details
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.User{}} on success
  {:error, info} on failure
  """
  @spec create_user(Tesla.Env.client, FinAPIAccess.Model.UserCreateParams.t, keyword()) :: {:ok, FinAPIAccess.Model.User.t} | {:error, Tesla.Env.t}
  def create_user(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/api/v1/users")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.User{})
  end

  @doc """
  Delete the authorized user
  Delete the authorized user. Must pass the user&#39;s access_token. ATTENTION: This deletes the user including all of his bank connections, accounts, balance data and transactions! THIS PROCESS CANNOT BE UNDONE! Note that a user cannot get deleted while any of his bank connections are currently busy (in the process of import, update, or transactions categorization). &lt;p&gt;Note: finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.&lt;/p&gt;

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_authorized_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_authorized_user(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/users")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete an unverified user
  Delete an unverified user. Must pass your global (i.e. client) access_token.&lt;br/&gt;&lt;br/&gt;Notes:&lt;br/&gt;&amp;bull; Unverified users can only exist if the field &#39;isUserAutoVerificationEnabled&#39; (see Client Configuration Resource) is set to &#39;false&#39; (or had been false at some point in the past).&lt;br/&gt;&amp;bull; finAPI will send a notification about the deletion of the user to each of your clients that has a user synchronization callback URL set in its configuration. This also includes the client that is performing this request.&lt;br/&gt;&amp;bull; finAPI regards user identifiers case-insensitive.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - user_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_unverified_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_unverified_user(connection, user_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/api/v1/users/#{user_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Edit the authorized user
  Edit the authorized user&#39;s data and settings. Must pass the user&#39;s access_token. Pass an empty string (but not null) to unset either the email or phone number. At least one field must have a non-null value in the request body. This service returns the user&#39;s password as &#39;XXXXX&#39;.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - body (UserUpdateParams): User&#39;s details
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.User{}} on success
  {:error, info} on failure
  """
  @spec edit_authorized_user(Tesla.Env.client, FinAPIAccess.Model.UserUpdateParams.t, keyword()) :: {:ok, FinAPIAccess.Model.User.t} | {:error, Tesla.Env.t}
  def edit_authorized_user(connection, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/api/v1/users")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.User{})
  end

  @doc """
  Execute password change
  Change the password of a user. Must pass your global (i.e. client) access_token.&lt;br/&gt;&lt;br/&gt;Note: When changing the password of a user, all tokens that have been handed out for that user (for whatever client) will be revoked! Also note that finAPI regards user identifiers case-insensitive.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (ExecutePasswordChangeParams): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec execute_password_change(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def execute_password_change(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/api/v1/users/executePasswordChange")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get the authorized user
  Get the authorized user&#39;s data. Must pass the user&#39;s access_token. Only the authorized user can get his data, i.e. his access_token must be used. This service returns the user&#39;s password as &#39;XXXXX&#39;.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_authorized_user(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.User.t} | {:error, Tesla.Env.t}
  def get_authorized_user(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/v1/users")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.User{})
  end

  @doc """
  Get a user&#39;s verification status
  Get the verification status of the requested user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - user_id (String.t): User&#39;s identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %FinAPIAccess.Model.VerificationStatusResource{}} on success
  {:error, info} on failure
  """
  @spec get_verification_status(Tesla.Env.client, String.t, keyword()) :: {:ok, FinAPIAccess.Model.VerificationStatusResource.t} | {:error, Tesla.Env.t}
  def get_verification_status(connection, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/api/v1/users/verificationStatus")
    |> add_param(:query, :"userId", user_id)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.VerificationStatusResource{})
  end

  @doc """
  Request password change
  Request password change for a user. Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RequestPasswordChangeParams): 

  ## Returns

  {:ok, %FinAPIAccess.Model.PasswordChangingResource{}} on success
  {:error, info} on failure
  """
  @spec request_password_change(Tesla.Env.client, keyword()) :: {:ok, FinAPIAccess.Model.PasswordChangingResource.t} | {:error, Tesla.Env.t}
  def request_password_change(connection, opts \\ []) do
    optional_params = %{
      :"body" => :body
    }
    %{}
    |> method(:post)
    |> url("/api/v1/users/requestPasswordChange")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%FinAPIAccess.Model.PasswordChangingResource{})
  end

  @doc """
  Verify a user
  Verify a user. User verification is only required when your client does not have auto-verification enabled (see field &#39;isUserAutoVerificationEnabled&#39; in Client Configuration Resource). Must pass your global (i.e. client) access_token. Note that finAPI regards user identifiers case-insensitive.

  ## Parameters

  - connection (FinAPIAccess.Connection): Connection to server
  - user_id (String.t): User&#39;s identifier
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec verify_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def verify_user(connection, user_id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/api/v1/users/verify/#{user_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
