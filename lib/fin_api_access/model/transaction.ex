# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule FinAPIAccess.Model.Transaction do
  @moduledoc """
  Container for a transaction's data
  """

  @derive [Poison.Encoder]
  defstruct [
    :"id",
    :"parentId",
    :"accountId",
    :"valueDate",
    :"bankBookingDate",
    :"finapiBookingDate",
    :"amount",
    :"purpose",
    :"counterpartName",
    :"counterpartAccountNumber",
    :"counterpartIban",
    :"counterpartBlz",
    :"counterpartBic",
    :"counterpartBankName",
    :"counterpartMandateReference",
    :"counterpartCustomerReference",
    :"counterpartCreditorId",
    :"counterpartDebitorId",
    :"type",
    :"typeCodeZka",
    :"typeCodeSwift",
    :"sepaPurposeCode",
    :"primanota",
    :"category",
    :"labels",
    :"isPotentialDuplicate",
    :"isAdjustingEntry",
    :"isNew",
    :"importDate",
    :"children",
    :"endToEndReference",
    :"compensationAmount",
    :"originalAmount",
    :"differentDebitor",
    :"differentCreditor"
  ]

  @type t :: %__MODULE__{
    :"id" => integer(),
    :"parentId" => integer() | nil,
    :"accountId" => integer(),
    :"valueDate" => String.t,
    :"bankBookingDate" => String.t,
    :"finapiBookingDate" => String.t,
    :"amount" => float(),
    :"purpose" => String.t | nil,
    :"counterpartName" => String.t | nil,
    :"counterpartAccountNumber" => String.t | nil,
    :"counterpartIban" => String.t | nil,
    :"counterpartBlz" => String.t | nil,
    :"counterpartBic" => String.t | nil,
    :"counterpartBankName" => String.t | nil,
    :"counterpartMandateReference" => String.t | nil,
    :"counterpartCustomerReference" => String.t | nil,
    :"counterpartCreditorId" => String.t | nil,
    :"counterpartDebitorId" => String.t | nil,
    :"type" => String.t | nil,
    :"typeCodeZka" => String.t | nil,
    :"typeCodeSwift" => String.t | nil,
    :"sepaPurposeCode" => String.t | nil,
    :"primanota" => String.t | nil,
    :"category" => Category | nil,
    :"labels" => [Label] | nil,
    :"isPotentialDuplicate" => boolean(),
    :"isAdjustingEntry" => boolean(),
    :"isNew" => boolean(),
    :"importDate" => String.t,
    :"children" => [integer()] | nil,
    :"endToEndReference" => String.t | nil,
    :"compensationAmount" => float() | nil,
    :"originalAmount" => float() | nil,
    :"differentDebitor" => String.t | nil,
    :"differentCreditor" => String.t | nil
  }
end

defimpl Poison.Decoder, for: FinAPIAccess.Model.Transaction do
  import FinAPIAccess.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:"category", :struct, FinAPIAccess.Model.Category, options)
    |> deserialize(:"labels", :list, FinAPIAccess.Model.Label, options)
  end
end

